name: deployment

on:
  push:
    branches: 
          - main
          - devsecops
          
  pull_request:
    branches: 
          - main
          - devsecops

  # workflow_dispatch: # for triggering the specific job manually
  #   inputs:
  #     trigger_Deployment:
  #       description: 'Set to yes to trigger Deployment'
  #       required: true
  #       default: 'no' 

jobs:
  Analyze_CQ:
    name: Analyze (${{ matrix.language }})
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ubuntu-latest #instance
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
       
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        
    - if: matrix.build-mode == 'manual'
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"


##Static_Application_Security_Test##
  Semgrep-SAST:
    name: Semgrep-SAST
    
    runs-on: label-1
    env:
       SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    #if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --json --json-output=semgrep.json #semgrep ci
        #env:
          #SEMGREP_APP_TOKEN:7909fa1240589af3f88de655a6c9e341c4000146ab886e5be110e64d2a8d9703
    
         # SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
         
## Secret_scanning_for_Repo
  secret_scanning_repo:
      runs-on: label-1 
      steps:
      - name: Checkout repository
        #working-directory: mnt/actions-runner/_work/wander/wanderlust
        run: cd /mnt/actions-runner/_work/wander/wanderlust && pwd && sudo git pull https://github.com/Sb-fine/wanderlust.git 
      - name: secret_scanning_repo
        run: docker run  --rm --name=deepfence-secretscanner -v /var/run/docker.sock:/var/run/docker.sock quay.io/deepfenceio/deepfence_secret_scanner_ce:2.2.0 --local string /mnt/actions-runner/_work/wander/wanderlust --output json > /mnt/actions-runner/_work/wander/deepfence_report/deepfence_repo.json
      - name: Upload results of secret scanning for repo
        uses: actions/upload-artifact@master
        with:
         name: secret_scanning_repo_report
         path: /mnt/actions-runner/_work/wander/deepfence_report/deepfence_repo.json 

##build and push docker images##
  build_push_image:
    runs-on: label-2 #runner
    needs: [Analyze_CQ, Semgrep-SAST, secret_scanning_repo]
    # env:
    #   IMAGE_TAG: ${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set the TAG environment variable
        run: echo "TAG=${GITHUB_RUN_ID}" >> $GITHUB_ENV
        
      - name: Login to DockerHub
        run: docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
        
      - name: Build and Push Backend Image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${{ env.TAG }} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${{ env.TAG }}

      - name: Build and Push Frontend Image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${{ env.TAG }} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${{ env.TAG }}

## Secret_Scanning_for_Container  
  secret_scanning_container:
      runs-on: label-2 
      needs: [build_push_image]
      steps:
      #for frontend
      - name: frontend_container_secret_scanning
        run:  docker run  --rm --name=deepfence-secretscanner -v /var/run/docker.sock:/var/run/docker.sock quay.io/deepfenceio/deepfence_secret_scanner_ce:2.2.0 --image-name ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${{ env.TAG }} --output json > /home/ubuntu/actions-runner/_work/deepfence_report/frontend_deepfence.json
      - name: Upload results of secret scanning for frontend
        uses: actions/upload-artifact@master
        with:
         name: secret_scanning_frontend_report
         path: /home/ubuntu/actions-runner/_work/deepfence_report/frontend_deepfence.json
       #for backend
      - name: backend_container_secret_scanning
        run: docker run  --rm --name=deepfence-secretscanner -v /var/run/docker.sock:/var/run/docker.sock quay.io/deepfenceio/deepfence_secret_scanner_ce:2.2.0 --image-name ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${{ env.TAG }} --output json > /home/ubuntu/actions-runner/_work/deepfence_report/backend_deepfence.json
      - name: Upload results of secret scanning for backend
        uses: actions/upload-artifact@master
        with:
         name: secret_scanning_backend_report
         path: /home/ubuntu/actions-runner/_work/deepfence_report/backend_deepfence.json

##Dependency check:
  
  Dependency-Test:
    runs-on: label-1
    needs: [build_push_image]
    name: depecheck_test
    steps:
      # - name: remove old repo
      #   run: rm -rf wanderlust 
      #- name: Checkout
        #uses: actions/checkout@v3
      - name: install dependencies
        run: sudo npm install
      - name: Depcheck frontend
        run: sudo bash /mnt/sec_tools/dependency-check/bin/dependency-check.sh --scan /mnt/actions-runner/_work/wanderlust/wanderlust/frontend/package.json --out /mnt/actions-runner/_work/wanderlust/wanderlust/frontend/depcheckfront.html  --nvdApiKey 92d03fc0-5a98-46df-b9a8-6a8cee5971f1
      - name: Depcheck backend
        run: sudo bash /mnt/sec_tools/dependency-check/bin/dependency-check.sh --scan /mnt/actions-runner/_work/wanderlust/wanderlust/backend/package.json --out /mnt/actions-runner/_work/wanderlust/wanderlust/backend/depcheckback.html --nvdApiKey 92d03fc0-5a98-46df-b9a8-6a8cee5971f1  
        
        
      - name: Upload Test results frontend 
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report front
           path: ${{github.workspace}}/frontend/depcheckfront.html  #dependency-check-report.html
           
      - name: Upload Test results backend
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report back
           path: ${{github.workspace}}/backend/depcheckback.html  #dependency-check-report.html     

  ## Docker Image Scanning through Trivy##
  Image_Scanning_with_trivy:
      runs-on: label-2
      needs: [build_push_image]
      name: image scanning
      steps:
  
       - name: frontend
         run: trivy image ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${{ env.TAG }} --output /mnt/report/trivyreportfront.txt
       - name: copying report to runner workspace  
         run: sudo cp /mnt/report/trivyreportfront.txt /home/ubuntu/actions-runner/_work/trivy-report

       - name: backend
         run: trivy image ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${{ env.TAG }} --output /mnt/report/trivyreportbackend.txt
       - name: copying report to runner workspace  
         run: sudo cp /mnt/report/trivyreportbackend.txt /home/ubuntu/actions-runner/_work/trivy-report
                   
       - name: Upload Test results-1
         uses: actions/upload-artifact@master
         with:
           name: image frontend report
           path: /home/ubuntu/actions-runner/_work/trivy-report/trivyreportfront.txt
       - name: Upload Test results-2
         uses: actions/upload-artifact@master
         with:
           name: image backend report
           path: /home/ubuntu/actions-runner/_work/trivy-report/trivyreportbackend.txt

  ## Deployment through Docker Compose ##    
  Deployment: 
    runs-on: label-2 #runner
    needs: [Dependency-Test, Image_Scanning_with_trivy]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Print the directory path and file content
        run: |
          pwd
          git branch -a
          # git checkout devsecops
          ls -a

      - name: Deploy the containers
        env:
          TAG: ${{ github.run_id }}
        run: |
          echo "TAG=${{ github.run_id }}" > .env
          cat .env
          sudo docker-compose down
          sudo docker-compose up -d --build
          sudo docker ps
          
      - name: Import sample data to Database
        run: |
          sudo docker exec mongo mongoimport --db wanderlust --collection posts --file ./data/sample_posts.json --jsonArray
          
      - name: Remove images from server 
        run: |
          echo "TAG=${{ github.run_id }}" > .env
          sudo docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${{ env.TAG }}
          sudo docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${{ env.TAG }}
      
          
##DAST##  
  DAST_Scan:
    runs-on: label-1
    needs: Deployment
    name: DAST
    steps:
      - name: ZAP Scan
        run: sudo bash /mnt/sec_tools/ZAP_2.15.0/zap.sh -cmd -quickurl http://54.174.222.89:5173 -quickout /mnt/sec_tools/ZAP_2.15.0/report.xml
      - name: copy report to runner work space
        run: sudo cp /mnt/sec_tools/ZAP_2.15.0/report.xml /mnt/actions-runner/_work/zap-report
      - name: Upload Test results 
        uses: actions/upload-artifact@master
        with:
           name: ZAP report
           path: /mnt/actions-runner/_work/zap-report/report.xml
      
          
    # - name: install frontend dependencies
    #   run: cd frontend && npm i 
    
    # - name: copy uri to .env #change the path
    #   run: cp /home/fs-lp-56/actions-runner/_work/wanderlust/wanderlust/backend/.env.sample .env.local
    
    # - name: start frontend
    #   run: |
    #       cd frontend && nohup npm run dev -- --host &
    
    # - name: install backend dependencies
    #   run: cd backend && npm i 
      
    # - name: copy uri to .env #change the path
    #   run: cp /home/fs-lp-56/actions-runner/_work/wanderlust/wanderlust/backend/.env.sample .env
    
    # - name: start backend server
    #   run: |
    #       # (cd backend && npm start > server.log 2>&1 &)
    #       cd backend && npm start
