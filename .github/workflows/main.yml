name: deployment

on:
  push:
    branches: [ "devsecops" ]
    
  pull_request:
    branches: [ "devsecops" ]

jobs:

  analyze_CQ:
    name: Analyze (${{ matrix.language }})
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ubuntu:latest #instance
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
       
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

##build and push docker images##
  build_push_image:
    runs-on: label-2 #runner
    needs: analyze_CQ
    # env:
    #   IMAGE_TAG: ${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      # - name: Set IMAGE_TAG variable
      #   run: |
      #     export IMAGE_TAG=${{ github.run_id }}
      #     echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
      - name: remove older images Image
        run: |
          sudo docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:latest
      - name: Build Image
        run: |
          docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"

          cd /home/ubuntu/actions-runner/_work/wanderlust/wanderlust/backend
          sudo docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:latest .
          sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:latest
          
          cd /home/ubuntu/actions-runner/_work/wanderlust/wanderlust/frontend
          sudo docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:latest .
          sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:latest

          
          # cd /home/ubuntu/actions-runner/_work/wanderlust/wanderlust/backend
          # sudo docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${IMAGE_TAG} .
          # sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_backend:${IMAGE_TAG}
          
          # cd /home/ubuntu/actions-runner/_work/wanderlust/wanderlust/frontend
          # sudo docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${IMAGE_TAG} .
          # sudo docker push ${{ secrets.DOCKER_HUB_USERNAME }}/wanderlust_frontend:${IMAGE_TAG}


##Deployment through docker compose##
  Deployment: 
    runs-on: label-2 #groot #runner
    needs: build_push_image
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3

    - name: print the directory path and file content
      run: |
        pwd
        git branch -a
        git checkout devsecops
        ls -a

    - name: run the containers on deployment server
      run: |
          sudo docker-compose down
          sudo docker-compose up -d --build
          sudo docker ps
          sudo docker exec mongo mongoimport --db wanderlust --collection posts --file ./data/sample_posts.json --jsonArray

      
          
    # - name: install frontend dependencies
    #   run: cd frontend && npm i 
    
    # - name: copy uri to .env #change the path
    #   run: cp /home/fs-lp-56/actions-runner/_work/wanderlust/wanderlust/backend/.env.sample .env.local
    
    # - name: start frontend
    #   run: |
    #       cd frontend && nohup npm run dev -- --host &
    
    # - name: install backend dependencies
    #   run: cd backend && npm i 
      
    # - name: copy uri to .env #change the path
    #   run: cp /home/fs-lp-56/actions-runner/_work/wanderlust/wanderlust/backend/.env.sample .env
    
    # - name: start backend server
    #   run: |
    #       # (cd backend && npm start > server.log 2>&1 &)
    #       cd backend && npm start
